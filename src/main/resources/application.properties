springfox.documentation.swagger.v2.path=/api-docs
server.servlet.context-path=/AutoSCFE
server.port=${SERVER_PORT:8090}
#spring.mvc.pathmatch.matching-strategy=ant-path-matcher
#spring.mvc.dispatch-options-request=true
#spring.web.resources.add-mappings=false

info.app.name=@project.name@
info.app.description=@project.description@
info.app.version=@project.version@
info.app.encoding=@project.build.sourceEncoding@
info.app.java.version=@java.version@

spring.application.name=${APPLICATION_NAME:apiautocase}
spring.profiles.active=${PROFILES_ACTIVE:dev}
spring.mvc.throw-exception-if-no-handler-found=${MVC_THROWEXCEPTIONIFNOHANDLERFOUNT:true}
spring.http.encoding.charset=${HTTP_ENCODINGCHARSET:UTF-8}

logging.level.root=${LOGGING_LEVELROOT:INFO}
logging.console.encoding=${LOGGING_CONSOLEENCODING:UTF-8}
logging.level.com.santander.connector.service=${LOGGING_LEVELAPPLICATION:DEBUG}
logging.level.com.santander.serenity=${LOGGING_LEVELSERENITY:DEBUG}
logging.pattern.console=${LOGGING_PATTERNCONSOLE:%d{yyyy-MM-dd HH:mm:ss.SSS} %5.5level -- [%20.20thread][%-40.40logger{10}] %-0.-1000m%n}

management.endpoints.web.exposure.include=${MANAGEMENT_ENDPOINTSWEBEXPOSUREINCLUDE:health, metrics, info}
management.endpoint.health.show-details=${MANAGEMENT_ENDPOINTHEALTHSHOWDETAILS:always}
management.endpoint.health.enabled=${MANAGEMENT_ENDPOINTHEALTHENABLED:true}

management.metrics.export.dynatrace.apiToken=${MANAGEMENT_METRICS_EXPORT_DYNATRACE_APITOKEN}
management.metrics.export.dynatrace.uri=${MANAGEMENT_METRICS_EXPORT_DYNATRACE_URI}
management.metrics.export.dynatrace.deviceId=${MANAGEMENT_METRICS_EXPORT_DYNATRACE_DEVICEID:apiautocase}
management.metrics.export.dynatrace.group=${MANAGEMENT_METRICS_EXPORT_DYNATRACE_GROUP:autocase}
management.metrics.export.dynatrace.step=${MANAGEMENT_METRICS_EXPORT_DYNATRACE_STEP:1m}
management.metrics.export.dynatrace.enabled=${MANAGEMENT_METRICS_EXPORT_DYNATRACE_ENABLED:false}

serenity.security.keyprovider.keyServerURL=${SERENITY_KEYSERVERURL}
serenity.security.validation.enabled=${SERENITY_VALIDATIONENABLED:true}
serenity.security.audience=${SERENITY_AUDIENCE:audience}
serenity.security.jwt.authorities-claim-name=${SERENITY_AUTHORITIESCLAIMNAME:scope}


autocase.httpclient.maxRouteConnections=${HTTPCLIENT_MAXROUTECONNECTIONS:40}
autocase.httpclient.maxTotalConnections=${HTTPCLIENT_MAXTOTALCONNECTIONS:40}
autocase.httpclient.maxLocalhostConnections=${HTTPCLIENT_MAXLOCALHOSTCONNECTIONS:80}
autocase.httpclient.defaultKeepAliveTime=${HTTPCLIENT_DEFAULTKEEPALIVETIME:20000}
autocase.httpclient.connectionTimeout=${HTTPCLIENT_CONNECTIONTIMEOUT:30000}
autocase.httpclient.requestTimeout=${HTTPCLIENT_REQUESTTIMEOUT:30000}
autocase.httpclient.socketTimeout=${HTTPCLIENT_SOCKETTIMEOUT:60000}
autocase.httpclient.idleConnectionWaitTime=${HTTPCLIENT_IDLECONNECTIONWAITTIME:60000}

resilience4j.ratelimiter.instances.serviceController.limit-for-period=${RATELIMITER_LIMITFORPERIOD:100}
resilience4j.ratelimiter.instances.serviceController.limit-refresh-period=${RATELIMITER_LIMITREFRESHPERIOD:1000ms}
resilience4j.ratelimiter.instances.serviceController.timeout-duration=${RATELIMITER_TIMEOUTDURATION:2000ms}
resilience4j.ratelimiter.instances.serviceController.registerHealthIndicator=${RATELIMITER_REGISTERHEALTHINDICATOR:true}

resilience4j.retry.instances.serviceClientRT.max-attempts=${RETRY_MAXATTEMPTS:3}
resilience4j.retry.instances.serviceClientRT.wait-duration=${RETRY_WAITDURATION:50ms}
resilience4j.retry.instances.serviceClientRT.enable-exponential-backoff=${RETRY_ENABLEEXPONENTIALBACKOFF:true}
resilience4j.retry.instances.serviceClientRT.exponential-backoff-multiplier=${RETRY_EXPONENTIALBACKOFFMULTIPLIER:2}
resilience4j.retry.instances.serviceClientRT.retry-exceptions=${RETRY_RETRYEXCEPTIONS:org.springframework.web.client.ResourceAccessException}
resilience4j.retry.instances.serviceClientRT.ignore-exceptions=${RETRY_IGNOREEXCEPTIONS:}
#resilience4j.retry.instances.serviceClientRT.registerHealthIndicator=${RETRY_REGISTERHEALTHINDICATOR:true}


connector.service.cache.expire=${CACHE_EXPIRE_SECONDS:3600}
